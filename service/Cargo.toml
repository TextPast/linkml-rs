[package]
name = "rootreal-model-symbolic-linkml"
version = "2.0.0"
edition = "2024"
authors = ["Simon C. Kemper <textpast@textpast.com>"]
license = "CC-BY-NC-4.0"
description = "LinkML schema validation service with 100% Python parity and TypeQL generation"
repository = "https://github.com/simonckemper/rootreal"
keywords = ["linkml", "schema", "validation", "typeql", "codegen"]
categories = ["data-structures", "encoding", "parser-implementations", "development-tools"]
readme = "README.md"
autoexamples = false  # Examples explicitly declared below for nested directory support
autotests = false

[package.metadata]
alias = "linkml-service"
[lib]
name = "linkml_service"

[features]
default = []
database = ["dep:sqlx"]  # Database support for PostgreSQL and MySQL (no SQLite to avoid burn conflicts)
linkml_full_tests = []
linkml_examples = []
test-utils = []  # Test utilities for external testing

# Rust-idiomatic DI migration (Phase 1)
idiomatic_di = []
idiomatic_di_linkml = ["idiomatic_di"]

[dependencies]

# Async runtime
tokio = { workspace = true, features = ["full"] }
async-trait = { workspace = true }
futures = "0.3"

# Serialization
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
serde_yaml = "0.9"
serde_urlencoded = "0.7"

# Bitflags for efficient flag management
bitflags = { version = "2.4", features = ["serde"] }

# Pattern matching
regex = "1.10"
pcre2 = "0.2"  # For full PCRE2 support with named capture groups

# Date/time and URL validation
chrono = { version = "0.4", features = ["serde"] }
url = "2.5"

# XML parsing
quick-xml = "0.31"

# Collections
indexmap = { version = "2.2", features = ["serde"] }
dashmap = { workspace = true }
lru = "0.13"
once_cell = "1.19"

# Excel generation
rust_xlsxwriter = "0.89.1"

# TypeDB integration
typedb-driver = { workspace = true }
base64 = "0.22"

# String case conversion
convert_case = "0.6"

# Error handling
thiserror = { workspace = true }
anyhow = { workspace = true }

# Validation compilation
quote = "1.0"
syn = { version = "2.0", features = ["full"] }

# Performance
rayon = "1.8"
parking_lot = "0.12"
arc-swap = "1.6"
blake3 = "1.5"
num_cpus = "1.16"
bincode = "1.3"
xxhash-rust = { version = "0.8", features = ["xxh3"] }
smallvec = "1.13"

# Cryptography
sha2 = "0.10"

# Plugin system
dlopen = "0.1"
dlopen_derive = "0.1"
semver = { version = "1.0", features = ["serde"] }
toml = "0.8"
petgraph = "0.6"
dirs = "5.0"
glob = "0.3"
hostname = "0.4"

# File operations
walkdir = "2.4"
notify = "7.0"
csv = "1.3"
calamine = "0.28"  # Excel/ODS parsing for schema introspection

# RDF support
oxigraph = { workspace = true }

# Database support - PostgreSQL and MySQL only (no SQLite to avoid burn conflicts)
# Use unified sqlx dependency from workspace
sqlx = { workspace = true, optional = true }

# HTTP client and server
reqwest = { version = "0.12", features = ["json", "stream"] }
axum = { workspace = true, features = ["json", "tokio"] }
tower = "0.5"
tower-http = { version = "0.6", features = ["cors", "trace"] }

# System info
sysinfo = "0.33"
uuid = { version = "1.11", features = ["v4"] }

# Tracing
tracing = { workspace = true }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }

# CLI
clap = { version = "4.4", features = ["derive"] }
colored = "2.1"
indicatif = "0.17"
rustyline = "14.0"
linkml_core = { workspace = true }
rootreal-hub-api-web-rest-core = { workspace = true }
rootreal-hub-web-frontend = { workspace = true }
shutdown_core = { workspace = true }
logger_core = { workspace = true }
logger_service = { workspace = true }
timestamp_service = { workspace = true, features = ["idiomatic_di"] }
task_management_core = { workspace = true }
error_handling_core = { workspace = true }
memory_core = { workspace = true }
configuration_core = { workspace = true }
cache_core = { workspace = true }
telemetry_core = { workspace = true }
lakehouse_core = { workspace = true }
parse_core = { workspace = true }
# parse_service = { path = "../../../data/parsing/parse/service", package = "rootreal-data-parsing-parse" }  # Circular dependency with parse_service
timeout_core = { workspace = true }
random_core = { workspace = true }
random_service = { workspace = true }
rootreal-security-identity-authentication-core = { workspace = true }
hash_core = { workspace = true }
rate_limiting_core = { workspace = true }
vector_database_core = { workspace = true }

# Event bus for LinkML validation event handling
event_bus_core = { workspace = true }

# Format identification for automatic format detection
format_identification_core = { workspace = true }
format_identification_service = { workspace = true }

dbms_core = { workspace = true }
dbms_service = { workspace = true }
error_handling_service = { workspace = true }
hash_service = { workspace = true }
monitoring_core = { workspace = true }
monitoring_service = { workspace = true }
shutdown_service = { workspace = true }
telemetry_service = { workspace = true }
timeout_service = { workspace = true }
timestamp_core = { workspace = true }
vector_database_service = { workspace = true }

# Additional service dependencies for full_integration example
cache_service = { workspace = true }
circuit_breaker_service = { workspace = true }
configuration_service = { workspace = true }
event_sourcing_task_manager_service = { workspace = true }
memory_service = { workspace = true }
task_management_service = { workspace = true }
embedding_service = { workspace = true }
lakehouse_service = { workspace = true }
snapshot_service = { workspace = true }
authentication_service = { workspace = true }
rootreal-security-identity-mfa = { workspace = true }
policy_enforcement_service = { workspace = true }
rate_limiting_service = { workspace = true }
pattern_recognition_service = { workspace = true }
som_service = { workspace = true }
port_management_service = { workspace = true }

[dev-dependencies]
tokio = { workspace = true, features = ["full", "test-util"] }
pretty_assertions = "1.4"
proptest = "1.3"
criterion = "0.5"
tempfile = "3.8"
futures = "0.3"
insta = "1.34"
once_cell = "1.19"
testing-mocks = { workspace = true }
tokio-test = "0.4"
rand = "0.8"  # For test RngCore implementation

# ============================================================================
# NOTE: ALL EXAMPLES TEMPORARILY DISABLED DUE TO API CHANGES
# ============================================================================
# The LinkML service has undergone significant API changes during the migration
# to the wiring pattern. All examples need to be updated to use the new APIs.
# The examples directory has been renamed to examples.disabled.
#
# To re-enable examples:
# 1. Rename examples.disabled back to examples
# 2. Update examples to use new API patterns (see docs/plan/hypernym)
# 3. Uncomment the example declarations below
# 4. Test each example individually
# ============================================================================
#
# # Examples organized by category (3-level nesting)
# # Run with: cargo run --example <name>
# 
# # 1 Basic
# [[example]]
# name = "basic_usage"
# path = "examples/01_basic/api/basic_usage.rs"
#
# [[example]]
# name = "basic_usage_api"
# path = "examples/01_basic/api/basic_usage_api.rs"
#
# [[example]]
# name = "standalone_usage"
# path = "examples/01_basic/api/standalone_usage.rs"
# 
# [[example]]
# name = "cli_usage"
# path = "examples/01_basic/cli/cli_usage.rs"
# 
# [[example]]
# name = "cli_with_fs_adapter"
# path = "examples/01_basic/cli/cli_with_fs_adapter.rs"
# 
# # 2 Validation
# [[example]]
# name = "advanced_validation"
# path = "examples/02_validation/api/advanced_validation.rs"
#
# # NOTE: advanced_validation_api temporarily disabled due to API changes
# # [[example]]
# # name = "advanced_validation_api"
# # path = "examples/02_validation/api/advanced_validation_api.rs"
# 
# # NOTE: test_instance_validation temporarily disabled due to API changes
# # [[example]]
# # name = "test_instance_validation"
# # path = "examples/02_validation/api/test_instance_validation.rs"
# 
# [[example]]
# name = "parse_and_validate_iso3166"
# path = "examples/02_validation/iso3166/parse_and_validate_iso3166.rs"
# 
# [[example]]
# name = "validate_country_schema"
# path = "examples/02_validation/iso3166/validate_country_schema.rs"
# 
# [[example]]
# name = "validate_iso3166_standalone"
# path = "examples/02_validation/iso3166/validate_iso3166_standalone.rs"
# 
# # NOTE: validate_with_parse_service temporarily disabled due to API changes
# # [[example]]
# # name = "validate_with_parse_service"
# # path = "examples/02_validation/patterns/validate_with_parse_service.rs"
# 
# [[example]]
# name = "validation_patterns"
# path = "examples/02_validation/patterns/validation_patterns.rs"
# 
# # 3 Data Loading
# [[example]]
# name = "array_support"
# path = "examples/03_data_loading/batch/array_support.rs"
# 
# [[example]]
# name = "linkml_batch_processing"
# path = "examples/03_data_loading/batch/batch_processing.rs"
# 
# [[example]]
# name = "data_transformation"
# path = "examples/03_data_loading/batch/data_transformation.rs"
# 
# [[example]]
# name = "csv_data_loading"
# path = "examples/03_data_loading/csv/csv_data_loading.rs"
# 
# [[example]]
# name = "csv_introspection_demo"
# path = "examples/03_data_loading/csv/csv_introspection_demo.rs"
# 
# [[example]]
# name = "api_loading"
# path = "examples/03_data_loading/database/api_loading.rs"
# 
# [[example]]
# name = "database_loading"
# path = "examples/03_data_loading/database/database_loading.rs"
# 
# # NOTE: excel_generation temporarily disabled due to API changes
# # [[example]]
# # name = "excel_generation"
# # path = "examples/03_data_loading/excel/excel_generation.rs"
# 
# [[example]]
# name = "excel_generation_advanced"
# path = "examples/03_data_loading/excel/excel_generation_advanced.rs"
# 
# # 4 Code Generation
# # NOTE: sqlalchemy_generation temporarily disabled due to API changes
# # [[example]]
# # name = "sqlalchemy_generation"
# # path = "examples/04_code_generation/database/sqlalchemy_generation.rs"
# 
# # NOTE: typeql_generation temporarily disabled due to API changes
# # [[example]]
# # name = "typeql_generation"
# # path = "examples/04_code_generation/database/typeql_generation.rs"
# 
# [[example]]
# name = "code_generation_showcase"
# path = "examples/04_code_generation/general/code_generation_showcase.rs"
# 
# [[example]]
# name = "generate_code_from_schema"
# path = "examples/04_code_generation/general/generate_code_from_schema.rs"
# 
# [[example]]
# name = "generate_complete_example"
# path = "examples/04_code_generation/general/generate_complete_example.rs"
# 
# [[example]]
# name = "test_code_generation"
# path = "examples/04_code_generation/general/test_code_generation.rs"
# 
# # NOTE: generate_iso3166_code temporarily disabled due to API changes
# # [[example]]
# # name = "generate_iso3166_code"
# # path = "examples/04_code_generation/iso3166/generate_iso3166_code.rs"
# 
# [[example]]
# name = "generate_iso3166_simple"
# path = "examples/04_code_generation/iso3166/generate_iso3166_simple.rs"
# 
# # NOTE: rust_code_generation temporarily disabled due to API changes
# # [[example]]
# # name = "rust_code_generation"
# # path = "examples/04_code_generation/rust/rust_code_generation.rs"
# 
# # NOTE: test_rust_generator_comprehensive temporarily disabled due to API changes
# # [[example]]
# # name = "test_rust_generator_comprehensive"
# # path = "examples/04_code_generation/rust/test_rust_generator_comprehensive.rs"
# 
# # NOTE: verify_rust_generator temporarily disabled due to API changes
# # [[example]]
# # name = "verify_rust_generator"
# # path = "examples/04_code_generation/rust/verify_rust_generator.rs"
# 
# # NOTE: verify_rust_generator_fix temporarily disabled due to API changes
# # [[example]]
# # name = "verify_rust_generator_fix"
# # path = "examples/04_code_generation/rust/verify_rust_generator_fix.rs"
# 
# # 5 Visualization
# # NOTE: graphviz_generation temporarily disabled due to API changes
# # [[example]]
# # name = "graphviz_generation"
# # path = "examples/05_visualization/diagrams/graphviz_generation.rs"
# 
# [[example]]
# name = "mermaid_generation"
# path = "examples/05_visualization/diagrams/mermaid_generation.rs"
# 
# [[example]]
# name = "project_generation"
# path = "examples/05_visualization/schemas/project_generation.rs"
#
# [[example]]
# name = "schema_generation"
# path = "examples/05_visualization/schemas/schema_generation.rs"
#
# [[example]]
# name = "schema_generation_api"
# path = "examples/05_visualization/schemas/schema_generation_api.rs"
# 
# [[example]]
# name = "prefix_map_generation"
# path = "examples/05_visualization/semantic_web/prefix_map_generation.rs"
# 
# [[example]]
# name = "rdf_generation"
# path = "examples/05_visualization/semantic_web/rdf_generation.rs"
# 
# # NOTE: semantic_web_generators temporarily disabled due to API changes
# # [[example]]
# # name = "semantic_web_generators"
# # path = "examples/05_visualization/semantic_web/semantic_web_generators.rs"
# 
# # 6 Integration
[[example]]
name = "full_integration"
path = "examples/06_integration/full_integration.rs"
#
# [[example]]
# name = "rootreal_integration"
# path = "examples/06_integration/rootreal_integration.rs"
#
# # NOTE: page_xml_schema_inference temporarily disabled due to API changes
# # [[example]]
# # name = "page_xml_schema_inference"
# # path = "examples/06_integration/schemas/page_xml_schema_inference.rs"
# 
# # NOTE: schema_migration_example already disabled earlier
# # [[example]]
# # name = "schema_migration_example"
# # path = "examples/06_integration/schemas/schema_migration_example.rs"
# 
# # NOTE: typedb_integration temporarily disabled due to API changes
# # [[example]]
# # name = "typedb_integration"
# # path = "examples/06_integration/typedb/typedb_integration.rs"
# 
# # NOTE: typeql_performance_check temporarily disabled due to API changes
# # [[example]]
# # name = "typeql_performance_check"
# # path = "examples/06_integration/typedb/typeql_performance_check.rs"
# 
# # 7 Performance
# # NOTE: performance_comparison temporarily disabled due to API changes
# # [[example]]
# # name = "performance_comparison"
# # path = "examples/07_performance/benchmarks/performance_comparison.rs"
# 
# # NOTE: performance_summary already disabled (file was renamed earlier)
# # [[example]]
# # name = "performance_summary"
# # path = "examples/07_performance/benchmarks/performance_summary.rs"
# 
# [[example]]
# name = "expression_performance_demo"
# path = "examples/07_performance/security/expression_performance_demo.rs"
# 
# [[example]]
# name = "performance_and_security"
# path = "examples/07_performance/security/performance_and_security.rs"
# 
# # 8 Advanced
# [[example]]
# name = "comprehensive_demo"
# path = "examples/08_advanced/comprehensive/comprehensive_demo.rs"
# 
# [[example]]
# name = "comprehensive_usage"
# path = "examples/08_advanced/comprehensive/comprehensive_usage.rs"
# 
# [[example]]
# name = "expression_functions_demo"
# path = "examples/08_advanced/expressions/expression_functions_demo.rs"
# 
# [[example]]
# name = "expression_language"
# path = "examples/08_advanced/expressions/expression_language.rs"
# 
# [[example]]
# name = "interactive_repl_demo"
# path = "examples/08_advanced/extensibility/interactive_repl_demo.rs"
# 
# # NOTE: plugin_system_demo temporarily disabled due to API changes
# # [[example]]
# # name = "plugin_system_demo"
# # path = "examples/08_advanced/extensibility/plugin_system_demo.rs"
# 
# [[example]]
# name = "schema_builder_demo"
# path = "examples/08_advanced/extensibility/schema_builder_demo.rs"
# 
[[bench]]
name = "validation_benchmarks"
harness = false

[[bench]]
name = "generation_benchmarks"
harness = false

[[bench]]
name = "parsing_benchmarks"
harness = false

[[bench]]
name = "expression_benchmarks"
harness = false

[[bench]]
name = "typeql_generation_benchmarks"
harness = false

[[bench]]
name = "linkml_benchmarks"
harness = false

[[bench]]
name = "performance_bench"
harness = false

[[bench]]
name = "validation_bench"
harness = false

[[bench]]
name = "inference_benchmarks"
harness = false

[[bench]]
name = "loader_benchmarks"
harness = false

[[bench]]
name = "roundtrip_benchmarks"
harness = false

[[test]]
name = "basic_smoke"
path = "tests/basic_smoke.rs"

[[test]]
name = "inference_integration"
path = "tests/inference_integration.rs"

[[test]]
name = "inference_property_tests"
path = "tests/inference_property_tests.rs"

[[test]]
name = "roundtrip_tests"
path = "tests/roundtrip_tests.rs"

[[test]]
name = "cli_integration_tests"
path = "tests/cli_integration_tests.rs"

[[test]]
name = "schemasheets_parser_tests"
path = "tests/schemasheets_parser_tests.rs"

[[test]]
name = "schemasheets_generator_tests"
path = "tests/schemasheets_generator_tests.rs"

[[test]]
name = "schemasheets_roundtrip_tests"
path = "tests/schemasheets_roundtrip_tests.rs"

[[test]]
name = "schemasheets_formatting_tests"
path = "tests/schemasheets_formatting_tests.rs"

[[test]]
name = "schemasheets_validation_tests"
path = "tests/schemasheets_validation_tests.rs"

[[test]]
name = "schemasheets_config_tests"
path = "tests/schemasheets_config_tests.rs"

[[bin]]
name = "linkml"
path = "src/bin/linkml.rs"
